import { Component, Inject, Input, } from '@angular/core';
import { MODULE_CONFIG_TOKEN, } from '../../config/module.config';
import { toCamelCase } from '../../internal/utils/toCamelCase';
import { Icons } from '../../providers/icon.provider';
import * as i0 from "@angular/core";
import * as i1 from "../../providers/icon.provider";
const DEFAULT_SIZE = 16;
const MESSAGE = {
    iconNotFound: 'Icon not found',
};
var DimensionType;
(function (DimensionType) {
    DimensionType["Width"] = "width";
    DimensionType["Height"] = "height";
})(DimensionType || (DimensionType = {}));
/**
 * Bootstrap icon component.
 */
export class NgxBootstrapIconsLibComponent {
    constructor(_elem, _changeDetector, _icons, _config) {
        this._elem = _elem;
        this._changeDetector = _changeDetector;
        this._icons = _icons;
        this._config = _config;
        /** Removes default dimensions from svg. */
        this.resetDefaultDimensions = false;
        this._setSize = (type, size = DEFAULT_SIZE) => `${type}="${size}"`;
        this._setIconMessage = (message, icon) => `${message}: ${icon}\n`;
        this._logMessage = (message) => console.warn(message);
    }
    /**
     * OnChanges event.
     *
     * @param changes SimpleChanges
     */
    ngOnChanges(changes) {
        // icons are provided as an array of objects because of "multi: true"
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const icons = Object.assign({}, ...this._icons);
        let svg = icons[toCamelCase(changes.name.currentValue)] || '';
        if (!svg) {
            this._logMessage(this._setIconMessage(MESSAGE.iconNotFound, changes.name.currentValue));
            return;
        }
        // if config provided
        if (this._config) {
            if (this._config.width) {
                svg = svg.replace(this._setSize(DimensionType.Width), this._setSize(DimensionType.Width, this._config.width));
            }
            if (this._config.height) {
                svg = svg.replace(this._setSize(DimensionType.Height), this._setSize(DimensionType.Height, this._config.height));
            }
            if (this._config.theme) {
                this._elem.nativeElement.classList.add(this._config.theme);
            }
        }
        if (this.resetDefaultDimensions) {
            svg = svg.replace(this._setSize(DimensionType.Width), '');
            svg = svg.replace(this._setSize(DimensionType.Height), '');
        }
        if (this.width && svg.includes(DimensionType.Width)) {
            svg = svg.replace(this._setSize(DimensionType.Width), this._setSize(DimensionType.Width, this.width));
        }
        if (this.height && svg.includes(DimensionType.Height)) {
            svg = svg.replace(this._setSize(DimensionType.Height), this._setSize(DimensionType.Height, this.height));
        }
        this._elem.nativeElement.innerHTML = svg;
        this._changeDetector.markForCheck();
    }
}
NgxBootstrapIconsLibComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: NgxBootstrapIconsLibComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: Icons }, { token: MODULE_CONFIG_TOKEN }], target: i0.ɵɵFactoryTarget.Component });
NgxBootstrapIconsLibComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.8", type: NgxBootstrapIconsLibComponent, selector: "i-bs, *[i-bs]", inputs: { name: "name", width: "width", height: "height", resetDefaultDimensions: "resetDefaultDimensions" }, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: NgxBootstrapIconsLibComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'i-bs, *[i-bs]',
                    template: '<ng-content></ng-content>',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Icons, decorators: [{
                    type: Inject,
                    args: [Icons]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MODULE_CONFIG_TOKEN]
                }] }]; }, propDecorators: { name: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], resetDefaultDimensions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,